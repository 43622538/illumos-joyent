#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2010-2011 Joyent, Inc.  All rights reserved.
# Use is subject to license terms.

set -o xtrace

. /lib/svc/share/smf_include.sh

# Make sure working directory is / to prevent unmounting problems.
cd /
PATH=/usr/sbin:/usr/bin; export PATH

case "$1" in
'start')

    USBMOUNT=
    enable_ur="true"

    # If we're not importing the pools, we shouldn't try to setup as a headnode
    # (since there'll be no zpool)
    if /bin/bootparams | grep "^noimport=true" > /dev/null 2>&1; then
        exit $SMF_EXIT_OK
    fi

    # If we're a headnode, we'll not have AMQP args on the cmdline, and we want
    # to run an initial_script first anyway.
    if /bin/bootparams | grep "^headnode=true" > /dev/null 2>&1; then
        USBMOUNT=/mnt/`svcprop -p joyentfs/usb_mountpoint svc:/system/filesystem/smartdc:default`

        initial_script=${USBMOUNT}/$(grep "^initial_script=" $USBMOUNT/config 2>/dev/null | cut -d'=' -f2-)
        if [ -n ${initial_script} ] && [ -e ${initial_script} ]; then
            # Execute the script
            ${initial_script}
            result=$?
            if [ ${result} -eq 2 ]; then
                # we're rebooting, no need to start ur
                echo "REBOOTING!" >> /dev/console
                enable_ur="false"
            elif [ ${result} -ne 0 ]; then
                echo "WARNING: initial_script failed with exit code [${result}]."
                exit $SMF_EXIT_ERR_FATAL
            fi
        fi
    fi

    if /bin/bootparams | grep "^standalone=true" > /dev/null 2>&1; then
        echo "INFO: System is standalone"
    else
        # headnode + node need Ur

        #
        # Grab AMQP parameters from the kernel command line or headnode config
        #
        rabbit=$(grep '^rabbitmq=' ${USBMOUNT}/config 2> /dev/null)

        if [[ -z $rabbit ]]; then
            rabbit=$(bootparams | grep '^rabbitmq=')

            if [[ -z $rabbit ]]; then
                echo "unable to find AMQP parameters!"
                exit $SMF_EXIT_ERR_FATAL
            fi
        fi

        rabbitparams=$(echo $rabbit | cut -d= -f2-)

        export AMQP_LOGIN=$(echo $rabbitparams | cut -d: -f1)
        export AMQP_PASSWORD=$(echo $rabbitparams | cut -d: -f2)
        export AMQP_HOST=$(echo $rabbitparams | cut -d: -f3)
        export AMQP_PORT=$(echo $rabbitparams | cut -d: -f4)

        /joyent/ur-agent/ur-agent >/etc/svc/volatile/ur-agent.log 2>&1 &
        if /bin/bootparams | grep "^headnode=true" > /dev/null 2>&1; then
            /usr/sbin/umount $USBMOUNT
        fi
    fi

    ;;

'stop')
    ;;

*)
    echo "Usage: $0 { start | stop }"
    exit $SMF_EXIT_ERR_FATAL
    ;;
esac
exit $SMF_EXIT_OK
