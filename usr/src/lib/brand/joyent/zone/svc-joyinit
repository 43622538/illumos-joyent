#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2010 Joyent, Inc.  All rights reserved.
# Use is subject to license terms.

. /lib/svc/share/smf_include.sh
. /lib/svc/share/joyent_include.sh

# Make sure working directory is / to prevent unmounting problems.
cd /
PATH=/usr/sbin:/usr/bin; export PATH

case "$1" in
'start')

    enable_ur="true"

    # Grab AMQP vars from kernel cmdline
    /usr/bin/bootparams | grep "^rabbitmq=" | cut -d'=' -f2 \
      | awk -F':' '{ print $1,$2,$3,$4 }' | { read user pass host port junk
        export AMQP_HOST="${host}"
        export AMQP_PORT="${port}"
        export AMQP_LOGIN="${user}"
        export AMQP_PASSWORD="${pass}"
    }

    # If we're a headnode, we'll not have AMQP args on the cmdline, and we want
    # to run an initial_script first anyway.
    if /bin/bootparams | grep "headnode=true" > /dev/null 2>&1; then
        . /lib/svc/share/joyent_include.sh

        # All the files come from USB, so we need that mounted.
        if !mount_usb ; then
            echo "FATAL: Cannot find USB key." >/dev/console
            exit 1;
        fi

        initial_script=$(grep "^initial_script=" /mnt/config 2>/dev/null | cut -d'=' -f2-)
        if [ -n ${initial_script} ] && [ -e ${initial_script} ]; then
            # Execute the script
            ${initial_script}
            result=$?
            if [ ${result} -eq 2 ]; then
                # we're rebooting, no need to start ur
                echo "REBOOTING!" >> /dev/console
                enable_ur="false"
            elif [ ${result} -ne 0 ]; then
                echo "WARNING: initial_script failed with exit code [${result}].  Not starting Ur."
                enable_ur="false"
            fi
        fi
    fi

    /joyent/ur-agent/ur-agent >/etc/svc/volatile/ur-agent.log 2>&1 &
    ;;

'stop')
    ;;

*)
    echo "Usage: $0 { start | stop }"
    exit $SMF_EXIT_ERR_FATAL
    ;;
esac
exit $SMF_EXIT_OK
